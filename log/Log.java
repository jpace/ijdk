package org.incava.ijdk.log;

import java.util.EnumSet;
import org.incava.ijdk.util.PropertyExt;
import static org.incava.ijdk.util.IUtil.*;

/**
 * <p>Provides quasi-logging support, more akin to debugging/development output
 * and trace statements than logging per se. Supports both tabular and
 * non-tabular output formats, the former being with the files, line numbers,
 * classes, and methods being arranged so that they line up vertically. That
 * format, I've found, is better for larger projects (500M+ LOC), in which class
 * names and package hierarchies tend to be larger. The non-tabular format seems
 * better for smaller projects.</p>
 *
 * <p>Colors can be enabled and disabled, and associated with classes, methods,
 * files, and levels. They are designed to work on terminals that support ANSI
 * escape codes. On platforms without this -- e.g., Windows -- colorization is
 * disabled.</p>
 *
 * <p>Unlike real logging mechanisms, there is no support for log rotations. I
 * recommend log4j for that. This package is mainly for programmers who want
 * trace statements from a Java program. See Kernighan and Pike for a defense of
 * those of us who develop and debug programs mainly relying on the print
 * statement.</p>
 *
 * <p>There is a serious performance hit to using this package, since each
 * output statement results in an exception being created.</p>
 *
 * <p>Remember: all kids love log.</p>
 */
public class Log extends Logger {
    /**
     * An array denoting no colors.
     */
    public final static EnumSet<ANSIColor> NO_COLORS = EnumSet.noneOf(ANSIColor.class);

    /**
     * An object denoting no color.
     */
    public final static ANSIColor NO_COLOR = null;
    
    /**
     * The code for no color applied.
     */
    public final static ANSIColor NONE = ANSIColor.NONE;

    /**
     * The code for reset of colors and decorations.
     */
    public final static ANSIColor RESET = ANSIColor.RESET;

    /**
     * The code for bold decoration.
     */
    public final static ANSIColor BOLD = ANSIColor.BOLD;

    /**
     * The code for underscore (AKA underline).
     */
    public final static ANSIColor UNDERSCORE = ANSIColor.UNDERSCORE;

    /**
     * The code for underline (AKA underscore).
     */
    public final static ANSIColor UNDERLINE = ANSIColor.UNDERLINE;

    /**
     * The code for the blink attribute.
     */
    public final static ANSIColor BLINK = ANSIColor.BLINK;

    /**
     * The code for reversed text.
     */
    public final static ANSIColor REVERSE = ANSIColor.REVERSE;

    /**
     * The code for hidden text.
     */
    public final static ANSIColor CONCEALED = ANSIColor.CONCEALED;

    /**
     * The code for black text.
     */
    public final static ANSIColor BLACK = ANSIColor.BLACK;

    /**
     * The code for red text.
     */
    public final static ANSIColor RED = ANSIColor.RED;

    /**
     * The code for green text.
     */
    public final static ANSIColor GREEN = ANSIColor.GREEN;

    /**
     * The code for yellow text.
     */
    public final static ANSIColor YELLOW = ANSIColor.YELLOW;

    /**
     * The code for blue text.
     */
    public final static ANSIColor BLUE = ANSIColor.BLUE;

    /**
     * The code for magenta text.
     */
    public final static ANSIColor MAGENTA = ANSIColor.MAGENTA;

    /**
     * The code for cyan text.
     */
    public final static ANSIColor CYAN = ANSIColor.CYAN;

    /**
     * The code for white text.
     */
    public final static ANSIColor WHITE = ANSIColor.WHITE;

    /**
     * The code for black background.
     */
    public final static ANSIColor ON_BLACK = ANSIColor.ON_BLACK;

    /**
     * The code for red background.
     */
    public final static ANSIColor ON_RED = ANSIColor.ON_RED;

    /**
     * The code for green background.
     */
    public final static ANSIColor ON_GREEN = ANSIColor.ON_GREEN;

    /**
     * The code for yellow background.
     */
    public final static ANSIColor ON_YELLOW = ANSIColor.ON_YELLOW;

    /**
     * The code for blue background.
     */
    public final static ANSIColor ON_BLUE = ANSIColor.ON_BLUE;

    /**
     * The code for magenta background.
     */
    public final static ANSIColor ON_MAGENTA = ANSIColor.ON_MAGENTA;

    /**
     * The code for cyan background.
     */
    public final static ANSIColor ON_CYAN = ANSIColor.ON_CYAN;

    /**
     * The code for white background.
     */
    public final static ANSIColor ON_WHITE = ANSIColor.ON_WHITE;

    //--- autogenerated by makeqlog

    public static boolean stack(Object obj) {
        return stack(LEVEL5, NO_COLORS, null, obj, DEFAULT_STACK_DEPTH);
    }

    public static boolean stack(ANSIColor color, Object obj) {
        return stack(LEVEL5, EnumSet.of(color), null, obj, DEFAULT_STACK_DEPTH);
    }

    public static boolean stack(EnumSet<ANSIColor> colors, Object obj) {
        return stack(LEVEL5, colors, null, obj, DEFAULT_STACK_DEPTH);
    }

    public static boolean stack(Level level, Object obj) {
        return stack(level, NO_COLORS, null, obj, DEFAULT_STACK_DEPTH);
    }

    public static boolean stack(Level level, ANSIColor color, Object obj) {
        return stack(level, EnumSet.of(color), null, obj, DEFAULT_STACK_DEPTH);
    }

    public static boolean stack(Level level, EnumSet<ANSIColor> colors, Object obj) {
        return stack(level, colors, null, obj, DEFAULT_STACK_DEPTH);
    }

    public static boolean stack(String name, Object obj) {
        return stack(LEVEL5, NO_COLORS, name, obj, DEFAULT_STACK_DEPTH);
    }

    public static boolean stack(ANSIColor color, String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(color), name, obj, DEFAULT_STACK_DEPTH);
    }

    public static boolean stack(EnumSet<ANSIColor> colors, String name, Object obj) {
        return stack(LEVEL5, colors, name, obj, DEFAULT_STACK_DEPTH);
    }

    public static boolean stack(Level level, String name, Object obj) {
        return stack(level, NO_COLORS, name, obj, DEFAULT_STACK_DEPTH);
    }

    public static boolean stack(Level level, ANSIColor color, String name, Object obj) {
        return stack(level, EnumSet.of(color), name, obj, DEFAULT_STACK_DEPTH);
    }

    public static boolean stack(Level level, EnumSet<ANSIColor> colors, String name, Object obj) {
        return stack(level, colors, name, obj, DEFAULT_STACK_DEPTH);
    }

    public static boolean stack(Object obj, int depth) {
        return stack(LEVEL5, NO_COLORS, null, obj, depth);
    }

    public static boolean stack(ANSIColor color, Object obj, int depth) {
        return stack(LEVEL5, EnumSet.of(color), null, obj, depth);
    }

    public static boolean stack(EnumSet<ANSIColor> colors, Object obj, int depth) {
        return stack(LEVEL5, colors, null, obj, depth);
    }

    public static boolean stack(Level level, Object obj, int depth) {
        return stack(level, NO_COLORS, null, obj, depth);
    }

    public static boolean stack(Level level, ANSIColor color, Object obj, int depth) {
        return stack(level, EnumSet.of(color), null, obj, depth);
    }

    public static boolean stack(Level level, EnumSet<ANSIColor> colors, Object obj, int depth) {
        return stack(level, colors, null, obj, depth);
    }

    public static boolean stack(String name, Object obj, int depth) {
        return stack(LEVEL5, NO_COLORS, name, obj, depth);
    }

    public static boolean stack(ANSIColor color, String name, Object obj, int depth) {
        return stack(LEVEL5, EnumSet.of(color), name, obj, depth);
    }

    public static boolean stack(EnumSet<ANSIColor> colors, String name, Object obj, int depth) {
        return stack(LEVEL5, colors, name, obj, depth);
    }

    public static boolean stack(Level level, String name, Object obj, int depth) {
        return stack(level, NO_COLORS, name, obj, depth);
    }

    public static boolean stack(Level level, ANSIColor color, String name, Object obj, int depth) {
        return stack(level, EnumSet.of(color), name, obj, depth);
    }

    public static boolean none(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.NONE), null, obj, 1);
    }

    public static boolean none(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.NONE), null, obj, 1);
    }

    public static boolean none(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.NONE), name, obj, 1);
    }

    public static boolean none(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.NONE), name, obj, 1);
    }

    public static boolean bold(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.BOLD), null, obj, 1);
    }

    public static boolean bold(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.BOLD), null, obj, 1);
    }

    public static boolean bold(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.BOLD), name, obj, 1);
    }

    public static boolean bold(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.BOLD), name, obj, 1);
    }

    public static boolean underscore(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.UNDERSCORE), null, obj, 1);
    }

    public static boolean underscore(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.UNDERSCORE), null, obj, 1);
    }

    public static boolean underscore(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.UNDERSCORE), name, obj, 1);
    }

    public static boolean underscore(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.UNDERSCORE), name, obj, 1);
    }

    public static boolean underline(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.UNDERLINE), null, obj, 1);
    }

    public static boolean underline(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.UNDERLINE), null, obj, 1);
    }

    public static boolean underline(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.UNDERLINE), name, obj, 1);
    }

    public static boolean underline(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.UNDERLINE), name, obj, 1);
    }

    public static boolean blink(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.BLINK), null, obj, 1);
    }

    public static boolean blink(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.BLINK), null, obj, 1);
    }

    public static boolean blink(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.BLINK), name, obj, 1);
    }

    public static boolean blink(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.BLINK), name, obj, 1);
    }

    public static boolean reverse(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.REVERSE), null, obj, 1);
    }

    public static boolean reverse(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.REVERSE), null, obj, 1);
    }

    public static boolean reverse(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.REVERSE), name, obj, 1);
    }

    public static boolean reverse(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.REVERSE), name, obj, 1);
    }

    public static boolean concealed(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.CONCEALED), null, obj, 1);
    }

    public static boolean concealed(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.CONCEALED), null, obj, 1);
    }

    public static boolean concealed(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.CONCEALED), name, obj, 1);
    }

    public static boolean concealed(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.CONCEALED), name, obj, 1);
    }

    public static boolean black(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.BLACK), null, obj, 1);
    }

    public static boolean black(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.BLACK), null, obj, 1);
    }

    public static boolean black(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.BLACK), name, obj, 1);
    }

    public static boolean black(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.BLACK), name, obj, 1);
    }

    public static boolean red(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.RED), null, obj, 1);
    }

    public static boolean red(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.RED), null, obj, 1);
    }

    public static boolean red(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.RED), name, obj, 1);
    }

    public static boolean red(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.RED), name, obj, 1);
    }

    public static boolean green(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.GREEN), null, obj, 1);
    }

    public static boolean green(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.GREEN), null, obj, 1);
    }

    public static boolean green(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.GREEN), name, obj, 1);
    }

    public static boolean green(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.GREEN), name, obj, 1);
    }

    public static boolean yellow(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.YELLOW), null, obj, 1);
    }

    public static boolean yellow(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.YELLOW), null, obj, 1);
    }

    public static boolean yellow(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.YELLOW), name, obj, 1);
    }

    public static boolean yellow(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.YELLOW), name, obj, 1);
    }

    public static boolean blue(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.BLUE), null, obj, 1);
    }

    public static boolean blue(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.BLUE), null, obj, 1);
    }

    public static boolean blue(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.BLUE), name, obj, 1);
    }

    public static boolean blue(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.BLUE), name, obj, 1);
    }

    public static boolean magenta(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.MAGENTA), null, obj, 1);
    }

    public static boolean magenta(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.MAGENTA), null, obj, 1);
    }

    public static boolean magenta(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.MAGENTA), name, obj, 1);
    }

    public static boolean magenta(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.MAGENTA), name, obj, 1);
    }

    public static boolean cyan(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.CYAN), null, obj, 1);
    }

    public static boolean cyan(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.CYAN), null, obj, 1);
    }

    public static boolean cyan(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.CYAN), name, obj, 1);
    }

    public static boolean cyan(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.CYAN), name, obj, 1);
    }

    public static boolean white(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.WHITE), null, obj, 1);
    }

    public static boolean white(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.WHITE), null, obj, 1);
    }

    public static boolean white(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.WHITE), name, obj, 1);
    }

    public static boolean white(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.WHITE), name, obj, 1);
    }

    public static boolean onBlack(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_BLACK), null, obj, 1);
    }

    public static boolean onBlack(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_BLACK), null, obj, 1);
    }

    public static boolean onBlack(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_BLACK), name, obj, 1);
    }

    public static boolean onBlack(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_BLACK), name, obj, 1);
    }

    public static boolean onRed(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_RED), null, obj, 1);
    }

    public static boolean onRed(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_RED), null, obj, 1);
    }

    public static boolean onRed(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_RED), name, obj, 1);
    }

    public static boolean onRed(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_RED), name, obj, 1);
    }

    public static boolean onGreen(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_GREEN), null, obj, 1);
    }

    public static boolean onGreen(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_GREEN), null, obj, 1);
    }

    public static boolean onGreen(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_GREEN), name, obj, 1);
    }

    public static boolean onGreen(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_GREEN), name, obj, 1);
    }

    public static boolean onYellow(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_YELLOW), null, obj, 1);
    }

    public static boolean onYellow(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_YELLOW), null, obj, 1);
    }

    public static boolean onYellow(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_YELLOW), name, obj, 1);
    }

    public static boolean onYellow(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_YELLOW), name, obj, 1);
    }

    public static boolean onBlue(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_BLUE), null, obj, 1);
    }

    public static boolean onBlue(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_BLUE), null, obj, 1);
    }

    public static boolean onBlue(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_BLUE), name, obj, 1);
    }

    public static boolean onBlue(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_BLUE), name, obj, 1);
    }

    public static boolean onMagenta(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_MAGENTA), null, obj, 1);
    }

    public static boolean onMagenta(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_MAGENTA), null, obj, 1);
    }

    public static boolean onMagenta(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_MAGENTA), name, obj, 1);
    }

    public static boolean onMagenta(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_MAGENTA), name, obj, 1);
    }

    public static boolean onCyan(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_CYAN), null, obj, 1);
    }

    public static boolean onCyan(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_CYAN), null, obj, 1);
    }

    public static boolean onCyan(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_CYAN), name, obj, 1);
    }

    public static boolean onCyan(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_CYAN), name, obj, 1);
    }

    public static boolean onWhite(Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_WHITE), null, obj, 1);
    }

    public static boolean onWhite(Level level, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_WHITE), null, obj, 1);
    }

    public static boolean onWhite(String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(ANSIColor.ON_WHITE), name, obj, 1);
    }

    public static boolean onWhite(Level level, String name, Object obj) {
        return stack(level, EnumSet.of(ANSIColor.ON_WHITE), name, obj, 1);
    }

    public static boolean log(Object obj) {
        return stack(LEVEL5, NO_COLORS, null, obj, 1);
    }

    public static boolean log(ANSIColor color, Object obj) {
        return stack(LEVEL5, EnumSet.of(color), null, obj, 1);
    }

    public static boolean log(EnumSet<ANSIColor> colors, Object obj) {
        return stack(LEVEL5, colors, null, obj, 1);
    }

    public static boolean log(Level level, Object obj) {
        return stack(level, NO_COLORS, null, obj, 1);
    }

    public static boolean log(Level level, ANSIColor color, Object obj) {
        return stack(level, EnumSet.of(color), null, obj, 1);
    }

    public static boolean log(Level level, EnumSet<ANSIColor> colors, Object obj) {
        return stack(level, colors, null, obj, 1);
    }

    public static boolean log(String name, Object obj) {
        return stack(LEVEL5, NO_COLORS, name, obj, 1);
    }

    public static boolean log(ANSIColor color, String name, Object obj) {
        return stack(LEVEL5, EnumSet.of(color), name, obj, 1);
    }

    public static boolean log(EnumSet<ANSIColor> colors, String name, Object obj) {
        return stack(LEVEL5, colors, name, obj, 1);
    }

    public static boolean log(Level level, String name, Object obj) {
        return stack(level, NO_COLORS, name, obj, 1);
    }

    public static boolean log(Level level, ANSIColor color, String name, Object obj) {
        return stack(level, EnumSet.of(color), name, obj, 1);
    }

    public static boolean inspect(Object obj) {
        return inspect(LEVEL5, NO_COLORS, null, obj, 1);
    }

    public static boolean inspect(ANSIColor color, Object obj) {
        return inspect(LEVEL5, EnumSet.of(color), null, obj, 1);
    }

    public static boolean inspect(EnumSet<ANSIColor> colors, Object obj) {
        return inspect(LEVEL5, colors, null, obj, 1);
    }

    public static boolean inspect(Level level, Object obj) {
        return inspect(level, NO_COLORS, null, obj, 1);
    }

    public static boolean inspect(Level level, ANSIColor color, Object obj) {
        return inspect(level, EnumSet.of(color), null, obj, 1);
    }

    public static boolean inspect(Level level, EnumSet<ANSIColor> colors, Object obj) {
        return inspect(level, colors, null, obj, 1);
    }

    public static boolean inspect(String name, Object obj) {
        return inspect(LEVEL5, NO_COLORS, name, obj, 1);
    }

    public static boolean inspect(ANSIColor color, String name, Object obj) {
        return inspect(LEVEL5, EnumSet.of(color), name, obj, 1);
    }

    public static boolean inspect(EnumSet<ANSIColor> colors, String name, Object obj) {
        return inspect(LEVEL5, colors, name, obj, 1);
    }

    public static boolean inspect(Level level, String name, Object obj) {
        return inspect(level, NO_COLORS, name, obj, 1);
    }

    public static boolean inspect(Level level, ANSIColor color, String name, Object obj) {
        return inspect(level, EnumSet.of(color), name, obj, 1);
    }

    public static boolean inspect(Level level, EnumSet<ANSIColor> colors, String name, Object obj) {
        return inspect(level, colors, name, obj, 1);
    }

    //--- end of autogenerated section.
    
}
